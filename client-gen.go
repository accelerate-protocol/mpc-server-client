// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for EntityKeyType.
const (
	KeyTypeEd25519   EntityKeyType = 1
	KeyTypeSecp256K1 EntityKeyType = 2
)

// CommonApiResp API标准响应格式
type CommonApiResp struct {
	// Code Code is the response code
	// @Description 响应状态码
	Code *int `json:"code,omitempty"`

	// Data Data is the response data
	// @Description 响应数据
	Data *interface{} `json:"data,omitempty"`

	// Message Message is the response message
	// @Description 响应消息
	Message *string `json:"message,omitempty"`
}

// EntityKeyType defines model for entity.KeyType.
type EntityKeyType int

// RestGenerateKeyReq defines model for rest.GenerateKeyReq.
type RestGenerateKeyReq struct {
	KeyType EntityKeyType `json:"key_type"`
}

// RestGenerateKeyRes defines model for rest.GenerateKeyRes.
type RestGenerateKeyRes struct {
	PublicKey *string `json:"public_key,omitempty"`
	Token     *string `json:"token,omitempty"`
}

// RestSignReq defines model for rest.SignReq.
type RestSignReq struct {
	Msg       string `json:"msg"`
	PublicKey string `json:"public_key"`
	Token     string `json:"token"`
}

// RestSignRes defines model for rest.SignRes.
type RestSignRes struct {
	Signature *string `json:"signature,omitempty"`
}

// PostApiV1CustodialAccountGenerateKeyJSONRequestBody defines body for PostApiV1CustodialAccountGenerateKey for application/json ContentType.
type PostApiV1CustodialAccountGenerateKeyJSONRequestBody = RestGenerateKeyReq

// PostApiV1CustodialAccountSignJSONRequestBody defines body for PostApiV1CustodialAccountSign for application/json ContentType.
type PostApiV1CustodialAccountSignJSONRequestBody = RestSignReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiV1CustodialAccountGenerateKeyWithBody request with any body
	PostApiV1CustodialAccountGenerateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CustodialAccountGenerateKey(ctx context.Context, body PostApiV1CustodialAccountGenerateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CustodialAccountSignWithBody request with any body
	PostApiV1CustodialAccountSignWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CustodialAccountSign(ctx context.Context, body PostApiV1CustodialAccountSignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiV1CustodialAccountGenerateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustodialAccountGenerateKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CustodialAccountGenerateKey(ctx context.Context, body PostApiV1CustodialAccountGenerateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustodialAccountGenerateKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CustodialAccountSignWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustodialAccountSignRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CustodialAccountSign(ctx context.Context, body PostApiV1CustodialAccountSignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustodialAccountSignRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiV1CustodialAccountGenerateKeyRequest calls the generic PostApiV1CustodialAccountGenerateKey builder with application/json body
func NewPostApiV1CustodialAccountGenerateKeyRequest(server string, body PostApiV1CustodialAccountGenerateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CustodialAccountGenerateKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CustodialAccountGenerateKeyRequestWithBody generates requests for PostApiV1CustodialAccountGenerateKey with any type of body
func NewPostApiV1CustodialAccountGenerateKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/custodial-account/generate-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1CustodialAccountSignRequest calls the generic PostApiV1CustodialAccountSign builder with application/json body
func NewPostApiV1CustodialAccountSignRequest(server string, body PostApiV1CustodialAccountSignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CustodialAccountSignRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CustodialAccountSignRequestWithBody generates requests for PostApiV1CustodialAccountSign with any type of body
func NewPostApiV1CustodialAccountSignRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/custodial-account/sign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiV1CustodialAccountGenerateKeyWithBodyWithResponse request with any body
	PostApiV1CustodialAccountGenerateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountGenerateKeyResponse, error)

	PostApiV1CustodialAccountGenerateKeyWithResponse(ctx context.Context, body PostApiV1CustodialAccountGenerateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountGenerateKeyResponse, error)

	// PostApiV1CustodialAccountSignWithBodyWithResponse request with any body
	PostApiV1CustodialAccountSignWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountSignResponse, error)

	PostApiV1CustodialAccountSignWithResponse(ctx context.Context, body PostApiV1CustodialAccountSignJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountSignResponse, error)
}

type PostApiV1CustodialAccountGenerateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *RestGenerateKeyRes `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CustodialAccountGenerateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CustodialAccountGenerateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CustodialAccountSignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int         `json:"code,omitempty"`
		Data *RestSignRes `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CustodialAccountSignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CustodialAccountSignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiV1CustodialAccountGenerateKeyWithBodyWithResponse request with arbitrary body returning *PostApiV1CustodialAccountGenerateKeyResponse
func (c *ClientWithResponses) PostApiV1CustodialAccountGenerateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountGenerateKeyResponse, error) {
	rsp, err := c.PostApiV1CustodialAccountGenerateKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustodialAccountGenerateKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CustodialAccountGenerateKeyWithResponse(ctx context.Context, body PostApiV1CustodialAccountGenerateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountGenerateKeyResponse, error) {
	rsp, err := c.PostApiV1CustodialAccountGenerateKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustodialAccountGenerateKeyResponse(rsp)
}

// PostApiV1CustodialAccountSignWithBodyWithResponse request with arbitrary body returning *PostApiV1CustodialAccountSignResponse
func (c *ClientWithResponses) PostApiV1CustodialAccountSignWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountSignResponse, error) {
	rsp, err := c.PostApiV1CustodialAccountSignWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustodialAccountSignResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CustodialAccountSignWithResponse(ctx context.Context, body PostApiV1CustodialAccountSignJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustodialAccountSignResponse, error) {
	rsp, err := c.PostApiV1CustodialAccountSign(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustodialAccountSignResponse(rsp)
}

// ParsePostApiV1CustodialAccountGenerateKeyResponse parses an HTTP response from a PostApiV1CustodialAccountGenerateKeyWithResponse call
func ParsePostApiV1CustodialAccountGenerateKeyResponse(rsp *http.Response) (*PostApiV1CustodialAccountGenerateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CustodialAccountGenerateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *RestGenerateKeyRes `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CustodialAccountSignResponse parses an HTTP response from a PostApiV1CustodialAccountSignWithResponse call
func ParsePostApiV1CustodialAccountSignResponse(rsp *http.Response) (*PostApiV1CustodialAccountSignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CustodialAccountSignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int         `json:"code,omitempty"`
			Data *RestSignRes `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVz0/cRhT+V6zXHo3t3Yo29SlbgipEKSgb9UJX0cT7sCfYnmFmDNmilQKqAEUgUEqq",
	"KpfSQ39cElKpStQKtX+NveSUf6GasZcfuw5NIvWS267fzPe+9+Z731uHgCWcpZgqCf46yCDChJifAUsS",
	"ljotTm+i5PpLF2UgKFeUpeBDa2GmONrOt7fy7/byvw6Lo5P8ZB9s4IJxFIpihdLF8btTrIsWlZaK0BIo",
	"OUslWvro1+n1G+cnrRJ68OB5cX9jcLQBNuA9kvAYwW94nte0QfU4gg80VRiigL4NXaLIeMYbRJGxjPpo",
	"bcbi0bNi76lGS1BKEtaUMFcGxjCrC/Wwz3eKjeOLVQAKwYQlcCVDqSxOBElQoYCzyqQSNA2h3z/7wu7c",
	"xUBpcpgqqnrOLPZumdA6YJol4C827GZnrDc23JvQ8YlVIlKS6PdZhOrudLc5Odn4FOzhhzYGvDn58WwD",
	"On0bBErlfI4pCqJwFns3cUVnu/zUy9i7rSoeHwpcAh8+cM/l5VbackdY9w3+SkYFdjWjM5hOTcXjROQ4",
	"EZ7diWlwexl7+t9IH21QbBnTmkj/dfnaNExrK05kWJvh3QlcbIRGv4Q1vNm5mmhNRyQNU6IygW9Udt8G",
	"iUEmqOq19ZuVGC1OZ7HXylRU4wWZipig3xAj9pKlDVSHIiRdIz4tOfBhGKxyEoMKfZ2Upkus9IxUkUAZ",
	"PSeExuBDwgOJYhXF9VB/cQKWnEPOLUy1TdBqLcxY7YxzJhTYkAl9NVKK+67baH7ieI7nNPxr3jXPldUp",
	"bRiXSrkVUamHmljSzKhV5rXmFqaqnw7YENMAU2naWZFocRJEaDUdbzTz2tqaQ0zUYSJ0q6vS/WJmavrL",
	"9vRE0/GcSCWxkQaKRM4v6XJogOcYco2EIQqHMtcccXUHqYrHygcbVlHIspaG42lQxjElnIIPH+kWaFER",
	"FZlHdQmn7mrDDTKpWJeSeIIEActS5YbVkE1UKuZMqvGHHxz+WOwcDH7dePnw51cnu8XhcbG7gaWZ5A93",
	"Zekiy41XJ7sv7z8+/Wc74cHg8bfF93/mJ/v5g6P8eCt/8kO++RsYmsIIaKYLPiwwqVqcftWYGlJrlcwu",
	"TD+UA4NSfca6vaF0MDVECecxDQyge1ey9Hy9/ZdB1bmdEejl2k+PXxS/b+b7m8WjZ3BxdJXIsBxJsxJM",
	"o5ue91b8SBzPL4G/eDXTkR3dt0cHf7gM365cWecKnZoWzM+WbpElCRG9ET1oiZLQbJnTP34pdl4Mnv40",
	"ONiCjr7yeuFpr7pCcE/+zg/2rpLamytJ2+X/KaHh3njftTNcO+8sGvOmV8jFLCTtcNJUVbqr68YsIHHE",
	"pDKWrpP9GwAA//9VkHNLzwoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
